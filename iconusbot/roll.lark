?start: expression
?expression: op_lvl0

// level 1 is lowest precendence, level 2 is higher precendence, etc.
?op_lvl0: op_lvl1
    | "if" expression "then" expression "else" op_lvl0 -> ifte
    | "let" CNAME "=" expression "in" op_lvl0 -> let
    | "for" CNAME "in" expression for_postfix -> for_

?for_postfix: ":" op_lvl0 -> for_postfix_no_where
    | "where" op_lvl0 -> for_postfix_where
    | "where" op_lvl0 ":" op_lvl0 -> for_postfix_both

?op_lvl1: op_lvl2
    | op_lvl1 "and" op_lvl2 -> and_
    | op_lvl1 "or" op_lvl2 -> or_

?op_lvl2: op_lvl2b
    | op_lvl2 "==" op_lvl2b -> eq
    | op_lvl2 "!=" op_lvl2b -> ne
    | op_lvl2 "<" op_lvl2b -> lt
    | op_lvl2 "<=" op_lvl2b -> le
    | op_lvl2 ">" op_lvl2b -> gt
    | op_lvl2 ">=" op_lvl2b -> ge

?op_lvl2b: op_lvl3
    | op_lvl2b "to" op_lvl3 ["by" op_lvl3] -> range

?op_lvl3: op_lvl4
    | op_lvl3 "+" op_lvl4 -> add
    | op_lvl3 "-" op_lvl4 -> sub

?op_lvl4: op_lvl5
    | op_lvl4 "*" op_lvl5 -> mul
    | op_lvl4 "/" op_lvl5 -> div

?op_lvl5: op_lvl6
    | "-" op_lvl5 -> neg
    | "not" op_lvl5 -> not_
    | "#" op_lvl5 -> count

?op_lvl6: op_lvl8
    | op_lvl6 "drop" "worst" op_lvl8 -> drop_worst
    | op_lvl6 "drop" "best" op_lvl8 -> drop_best
    | op_lvl6 "keep" "worst" op_lvl8 -> keep_worst
    | op_lvl6 "keep" "best" op_lvl8 -> keep_best

?op_lvl8: NUMBER -> number
    | op_lvl8 die -> dice
    | die
    | CNAME op_lvl8 -> fn_call
    | CNAME -> var
    | "true" -> true
    | "false" -> false
    | "'" "'" -> string_0
    | "'" /[^']+/ "'" -> string
    | "(" ")" -> tuple_0
    | "(" tuple_element "," ")" -> tuple_1
    | "(" tuple_element ("," tuple_element)+ ","? ")" -> tuple_n
    | "(" expression ")"

?die: D op_lvl8 -> die_number
    | D "{" "}" -> die_sequence_0
    | D "{" tuple_element ("," tuple_element)* ","? "}" -> die_sequence_n

?tuple_element: expression
    | "*" expression -> unpack

CNAME: /([dD][a-zA-Z_][a-zA-Z0-9_]*|[a-ce-zA-CE-Z_][a-zA-Z0-9_]*)/
D: /[dD]/

%import common.NUMBER
%import common.WS
%ignore WS
